from flask import Flask, request, jsonify
from pymongo import MongoClient
from flasgger import Swagger
from flask_cors import CORS
from flasgger.utils import swag_from
import nmap
import re

client = MongoClient('127.0.0.1', 27017)
db = client['test']
vulnscan_collection = db['todos']

app = Flask(__name__)
CORS(app)
Swagger(app)
app.debug = True
nm = nmap.PortScanner()

@app.route('/alive')
def healthz():
    return 'I''m ok, thanks!'

@app.route('/get_last_cve', methods=['GET'])
def get_last_cve():
    """
    GET: Returns the last CVE version available to update
    """
    return str('CVE-01-01-2017')

@app.route('/get_current_cve', methods=['GET'])
def get_current_cve():
    """
    GET: Returns the current CVE version on the database
    """
    return str('CVE-01-01-2017')

@app.route('/update_cve', methods=['POST'])
def update_to_last_cve():
    """
    GET: Returns the current CVE version on the database
    """
    return str('CVE-01-01-2017')

@app.route('/scan_services', methods=['POST'])
@swag_from('api-docs/scan_services.yml')
def scan_services_by_ip():
    """
    Scan ports and services for a given IP address.
    DATA: results = {'ip': '', 'policy_id': '','results': []}
    POST: Returns an object with ip, policy and a list of results
          containing the services with its versions,
          Returns the CPE name.
    """
    params = request.get_json()
    nm.scan(str(params['ip']))
    all_ports_detected = nm[params['ip']]['tcp']
    results = {'ip': '', 'policy_id': '','services': []}
    results['ip'] = params['ip']
    results['policy_id'] = params['policy_id']
    for port in all_ports_detected:
        port_scan_result = all_ports_detected[port]
        port_scan_result['port'] = port
        if (int(port) == 443):
            port_scan_result['tls_versions'] = scan_for_tls_support(params['ip'])
        results['services'].append(port_scan_result)

    return jsonify(results)

def scan_for_tls_support(ip):
    ssl_results = nm.scan(ip, arguments="-p 443 --script ssl-enum-ciphers")
    ssl_ciphers_results = ssl_results['scan'][ip]['tcp'][443]['script']['ssl-enum-ciphers']
    ssl_tls_version_matches = re.findall('TLSv\d.\d', ssl_ciphers_results, re.DOTALL)
    return ssl_tls_version_matches

@app.route('/search_vulnerabilities', methods=['POST'])
@swag_from('api-docs/search_vulnerabilities.yml')
def search_vulnerabilities_by_cpe():
    """Scan vulnerabiliies by given CPE name.
    """
    params = request.get_json()
    results = {'cpe':'', 'vulnerabilities':[]}
    results['cpe'] = params['cpe']
    for result in vulnscan_collection.find({"text": params['cpe']}):
        results['vulnerabilities'].append(result['text'])
        print(result)

    test_response = {'cpe': params['cpe'], 'vulnerabilities': [{'vulnerability': 'cve-0001-05','vulnerability_text': 'freeSSHd.exe in freeSSHd through 1.2.6 allows remote attackers to bypass authentication via a crafted session, as demonstrated by an OpenSSH client with modified versions of ssh.c and sshconnect2.c.", "score": "7.5'}]}
    return jsonify(test_response)

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0')
