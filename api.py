from flask import Flask, request, jsonify
from pymongo import MongoClient
from flasgger import Swagger
from flask_cors import CORS
from flasgger.utils import swag_from
import nmap
from cve_search import db as cve_db
from cve_search.lib.Config import Configuration
import re
import json
from JSONEncoder import JSONEncoder
import shlex
import subprocess
import os
import sys
from dateutil.parser import parse as parse_datetime
from xml.sax import make_parser

client = MongoClient('127.0.0.1', 27017)
db = client['cvedb']
vulnscan_collection = db['todos']

app = Flask(__name__)
CORS(app)
Swagger(app)
app.debug = True
nm = nmap.PortScanner()

@app.route('/alive')
def healthz():
    return 'I''m ok, thanks!'

@app.route('/update_db', methods=['POST'])
@swag_from('api-docs/update_db.yml')
def update_db():
    """
    GET: Returns the current CVE version on the database
    """

    response = update_collections()
    # runPath = os.path.dirname(os.path.realpath(__file__))
    # process = subprocess.Popen([sys.executable, os.path.join(runPath, "../sbin/db_updater.py"), "-civ"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # out, err = process.communicate()
    # output="%s\n\nErrors:\n%s"%(str(out,'utf-8'),str(err,'utf-8')) if err else str(out,'utf-8')
    # return jsonify({"updateOutput": output, "status": "db_updated"})


    return jsonify(response)

@app.route('/last_scan', methods=['GET'])
@swag_from('api-docs/last_scan.yml')
def get_last_scan():
    """
    GET: Returns the current CVE version on the database
    """
    last_id = history_last_id()
    print('last_id before '+str(last_id))
    last_id = last_id != None and last_id or 1
    print('last_id after '+str(last_id))
    cursor = db['history'].find({'id':last_id})

    results = [item for item in cursor]
    return JSONEncoder().encode(results)


@app.route('/scan_services', methods=['POST'])
@swag_from('api-docs/scan_services.yml')
def scan_services_by_ip():
    """
    Scan ports and services for a given IP address.
    DATA: results = {'ip': '', 'policy_id': '','results': []}
    POST: Returns an object with ip, policy and a list of results
          containing the services with its versions,
          Returns the CPE name.
    """
    params = request.get_json()
    nm.scan(str(params['ip']))
    all_ports_detected = nm[params['ip']]['tcp']
    results = {'ip': '', 'policy_id': '','services': []}
    results['ip'] = params['ip']
    results['policy_id'] = params['policy_id']
    for port in all_ports_detected:
        port_scan_result = all_ports_detected[port]
        port_scan_result['port'] = port
        if (int(port) == 443):
            port_scan_result['tls_versions'] = scan_for_tls_support(params['ip'])
        results['services'].append(port_scan_result)

    return jsonify(results)

def scan_for_tls_support(ip):
    ssl_results = nm.scan(ip, arguments="-p 443 --script ssl-enum-ciphers")
    ssl_ciphers_results = ssl_results['scan'][ip]['tcp'][443]['script']['ssl-enum-ciphers']
    ssl_tls_version_matches = re.findall('TLSv\d.\d', ssl_ciphers_results, re.DOTALL)
    return ssl_tls_version_matches

@app.route('/search_vulnerabilities', methods=['POST'])
@swag_from('api-docs/search_vulnerabilities.yml')
def search_vulnerabilities():
    """Scan vulnerabiliies by given CPE name.
    """
    params = request.get_json()
    response = {'cpe': params['cpe'], 'vulnerabilities': []}
    for item in cve_db.cvesForCPE(params['cpe']):
        vulnerability = {'vulnerability': '','vulnerability_text': '", "score": "'}
        vulnerability['vulnerability'] = item['id']
        vulnerability['vulnerability_text'] = item['summary']
        vulnerability['score'] = item['cvss']
        response['vulnerabilities'].append(vulnerability)
    return jsonify(response)

@app.route('/history_bulk_insert', methods=['POST'])
@swag_from('api-docs/history_bulk_insert.yml')
def history_bulk_insert():
    """Bulk insert history of scans on database.
    """
    params = request.get_json()
    last_id = history_last_id()
    print('last_id before '+str(last_id))
    last_id = last_id != None and int(last_id) + 1 or 1
    print('last_id after '+str(last_id))
    response = []
    for item in params['history_list']:
        obj = {}
        obj['id'] = last_id
        obj['ip'] = item['ip']
        obj['port'] = item['port']
        obj['score'] = item['score']
        obj['service'] = item['service']
        obj['version'] = item['version']
        obj['vulnerability'] = item['vulnerability']
        obj['vulnerability_text'] = item['vulnerability_text']
        response.append(obj)
    result = db['history'].insert_many(response)
    # return result.inserted_ids
    # return db['history'].insert(obj)
    return '\nsuccess'

def history_last_id():
    """Retrieve last id of scan results history.
    """
    results = db['history'].find_one(sort=[("id", -1)])
    if results != None:
        results = results["id"]
    return results

def update_collections():
    # init parts of the file names to enable looped file download
    file_prefix = "nvdcve-2.0-"
    file_suffix = ".xml.gz"
    file_mod = "modified"
    file_rec = "recent"
    # get the 'modified' file
    getfile = file_prefix + file_mod + file_suffix
    try:
        (f, r) = Configuration.getFile(Configuration.getFeedURL('cve') + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?"%(Configuration.getFeedURL("cve") + getfile))
    i = cve_db.getInfo("cves")
    last_modified = parse_datetime(r.headers['last-modified'], ignoretz=True)
    if i is not None:
        if last_modified == i['last-modified']:
            print("Not modified")
            sys.exit(0)
    cve_db.setColUpdate("cves", last_modified)

    # get your parser on !!
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in ch.cves:
        # check if the CVE already exists.
        x = cve_db.getCVE(item['id'])
        # if so, update the entry.
        if x:
            if 'cvss' not in item:
                item['cvss'] = None
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            cve_db.updateCVE(item)
        else:
            cve_db.insertCVE(item)
    # get the 'recent' file
    getfile = file_prefix + file_rec + file_suffix
    try:
        (f, r) = Configuration.getFile(Configuration.getFeedURL('cve') + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?"%(Configuration.getFeedURL("cve") + getfile))
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in progressbar(ch.cves):
        # check if the CVE already exists.
        x = cve_db.getCVE(item['id'])
        # if so, update the entry.
        if x:
            if args.v:
                print("item found : " + item['id'])
            if 'cvss' not in item:
                item['cvss'] = None
            else:
                item['cvss'] = float(item['cvss'])
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            cve_db.updateCVE(item)
        # if not, create it.
        else:
            cve_db.insertCVE(item)
    return 'success'

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0')


class CVEHandler(ContentHandler):
    def __init__(self):
        self.cves = []
        self.inCVSSElem = 0
        self.inSUMMElem = 0
        self.inDTElem = 0
        self.inPUBElem = 0
        self.inAccessvElem = 0
        self.inAccesscElem = 0
        self.inAccessaElem = 0
        self.inCVSSgenElem = 0
        self.inImpactiElem = 0
        self.inImpactcElem = 0
        self.inImpactaElem = 0

    def startElement(self, name, attrs):
        if name == 'entry':
            self.cves.append({'id': attrs.get('id'), 'references': [], 'vulnerable_configuration': [], 'vulnerable_configuration_cpe_2_2':[]})
            self.ref = attrs.get('id')
        elif name == 'cpe-lang:fact-ref':
            self.cves[-1]['vulnerable_configuration'].append(toStringFormattedCPE(attrs.get('name')))
            self.cves[-1]['vulnerable_configuration_cpe_2_2'].append(attrs.get('name'))
        elif name == 'cvss:score':
            self.inCVSSElem = 1
            self.CVSS = ""
        elif name == 'cvss:access-vector':
            self.inAccessvElem = 1
            self.accessv = ""
        elif name == 'cvss:access-complexity':
            self.inAccesscElem = 1
            self.accessc = ""
        elif name == 'cvss:authentication':
            self.inAccessaElem = 1
            self.accessa = ""
        elif name == 'cvss:confidentiality-impact':
            self.inImpactcElem = 1
            self.impactc = ""
        elif name == 'cvss:integrity-impact':
            self.inImpactiElem = 1
            self.impacti = ""
        elif name == 'cvss:availability-impact':
            self.inImpactaElem = 1
            self.impacta = ""
        elif name == 'cvss:generated-on-datetime':
            self.inCVSSgenElem = 1
            self.cvssgen = ""
        elif name == 'vuln:summary':
            self.inSUMMElem = 1
            self.SUMM = ""
        elif name == 'vuln:published-datetime':
            self.inDTElem = 1
            self.DT = ""
        elif name == 'vuln:last-modified-datetime':
            self.inPUBElem = 1
            self.PUB = ""
        elif name == 'vuln:reference':
            self.cves[-1]['references'].append(attrs.get('href'))
        elif name == 'vuln:cwe':
            self.cves[-1]['cwe'] = attrs.get('id')

    def characters(self, ch):
        if self.inCVSSElem:
            self.CVSS += ch
        if self.inSUMMElem:
            self.SUMM += ch
        if self.inDTElem:
            self.DT += ch
        if self.inPUBElem:
            self.PUB += ch
        if self.inAccessvElem:
            self.accessv += ch
        if self.inAccesscElem:
            self.accessc += ch
        if self.inAccessaElem:
            self.accessa += ch
        if self.inCVSSgenElem:
            self.cvssgen += ch
        if self.inImpactiElem:
            self.impacti += ch
        if self.inImpactcElem:
            self.impactc += ch
        if self.inImpactaElem:
            self.impacta += ch

    def endElement(self, name):
        if name == 'cvss:score':
            self.inCVSSElem = 0
            self.cves[-1]['cvss'] = self.CVSS
        if name == 'cvss:access-vector':
            self.inAccessvElem = 0
            if 'access' not in self.cves[-1]:
                self.cves[-1]['access'] = {}
            self.cves[-1]['access']['vector'] = self.accessv
        if name == 'cvss:access-complexity':
            self.inAccesscElem = 0
            if 'access' not in self.cves[-1]:
                self.cves[-1]['access'] = {}
            self.cves[-1]['access']['complexity'] = self.accessc
        if name == 'cvss:authentication':
            self.inAccessaElem = 0
            if 'access' not in self.cves[-1]:
                self.cves[-1]['access'] = {}
            self.cves[-1]['access']['authentication'] = self.accessa
        if name == 'cvss:confidentiality-impact':
            self.inImpactcElem = 0
            if 'impact' not in self.cves[-1]:
                self.cves[-1]['impact'] = {}
            self.cves[-1]['impact']['confidentiality'] = self.impactc
        if name == 'cvss:integrity-impact':
            self.inImpactiElem = 0
            if 'impact' not in self.cves[-1]:
                self.cves[-1]['impact'] = {}
            self.cves[-1]['impact']['integrity'] = self.impacti
        if name == 'cvss:availability-impact':
            self.inImpactaElem = 0
            if 'impact' not in self.cves[-1]:
                self.cves[-1]['impact'] = {}
            self.cves[-1]['impact']['availability'] = self.impacta
        if name == 'cvss:generated-on-datetime':
            self.inCVSSgenElem = 0
            self.cves[-1]['cvss-time'] = parse_datetime(self.cvssgen, ignoretz=True)
        if name == 'vuln:summary':
            self.inSUMMElem = 0
            self.cves[-1]['summary'] = self.SUMM
        if name == 'vuln:published-datetime':
            self.inDTElem = 0
            self.cves[-1]['Published'] = parse_datetime(self.DT, ignoretz=True)
        if name == 'vuln:last-modified-datetime':
            self.inPUBElem = 0
            self.cves[-1]['Modified'] = parse_datetime(self.PUB, ignoretz=True)
