from flask import Flask, request, jsonify
from pymongo import MongoClient
from flask.ext.autodoc import Autodoc
import nmap

client = MongoClient('127.0.0.1', 27017)
db = client['test']
vulnscan_collection = db['todos']

app = Flask(__name__)
app.debug = True
auto = Autodoc(app)

@app.route('/alive')
@auto.doc()
def healthz():
    return 'I''m ok, thanks!'

@auto.doc()
@app.route('/scan_services', methods=['POST'])
def scan_services():
    """Scan ports and services for a given IP address.

    POST: Returns an object with ip, policy and a list of results
          containing the services with its versions,
          Returns the CPE name.
    """
    params = request.get_json()
    nm = nmap.PortScanner()
    nm.scan(str(params['ip']))
    all_ports_detected = nm[params['ip']]['tcp']
    results = {'ip': '', 'policy': '','results': []}
    results['ip'] = params['ip']
    results['policy'] = params['policy']
    for port in all_ports_detected:
        port_scan_result = all_ports_detected[port]
        port_scan_result['port'] = port
        results['results'].append(port_scan_result)
        if (int(port) == 443):
            #TODO - add tls version support check
            print('PORT 443 IS OPEN')
        else:
            print('PORT 443 IS CLOSED')

    return jsonify(results)

@auto.doc()
@app.route('/scan_vulnerabilities', methods=['POST'])
def scan_vulnerabilities():
    """Scan vulnerabiliies by given CPE name.

    POST: Returns an object with the CPE name, and a list of results
          containing the vulnerabilities description matching.
    """
    params = request.get_json()
    results = {'cpe':'', 'results':[]}
    results['cpe'] = params['cpe']
    for result in vulnscan_collection.find({"text": params['cpe']}):
        results['results'].append(result['text'])
        print(result)

    return jsonify(results)

@app.route('/docs', methods=['GET'])
def documentation():
    return auto.html()

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0')
