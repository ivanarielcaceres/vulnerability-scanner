from flask import Flask, request, jsonify, g, url_for, abort
from cve_search import db as cve_db
from cve_search.lib.Config import Configuration
from cve_search.lib.ProgressBar import progressbar
from dateutil.parser import parse as parse_datetime
from pymongo import MongoClient
from .cve_handler import CVEHandler
from xml.sax import make_parser
import sys
import time
import nmap
import requests

nm = nmap.PortScanner()
client = MongoClient('127.0.0.1', 27017)
db = client['cvedb']
#db_mgmt.py
defaultvalue = {}
defaultvalue['cwe'] = "Unknown"

def search_vulnerabilities(service):
    """Scan vulnerabiliies by given CPE name.
    """
    response = {'cpe': service['cpe'], 'vulnerabilities': []}
    for item in cve_db.cvesForCPE(service['cpe']):
        vulnerability = {'vulnerability': '','vulnerability_text': '", "score": "'}
        vulnerability['vulnerability'] = item['id']
        vulnerability['vulnerability_text'] = item['summary']
        vulnerability['score'] = item['cvss']
        vulnerability['port'] = str(service['port'])
        response['vulnerabilities'].append(vulnerability)
    return response

def save_scan_result(data):
    response = ''
    try:
        r = requests.post('https://api.ersins.com/scan/save', json = data)
        response = r.json()
    except:
        print('There is a erro on saving scan reulst')
    return response

def verify_ers_auth(data):
    response = ''
    try:
        r = requests.post('https://api.ersins.com/scan/auth', json = data)
        response = r.json()
    except:
        print('There is a erro on saving scan reulst')
    return response

def find_ips():
    try:
        ips = [requests.get('https://api.ersins.com/scan/find').json()]
        print('IPS RETURNED FROM API.ERSINS {}'.format(ips))
        new_ips = []
        for ip in ips:
            if 'ip' in ip.keys():
                new_ips.append(ip)
        ips = new_ips
    except:
        ips = [{'success': True, 'policy_key': '16f9255fe539f8c060b15978916520ae', 'ip': '127.0.0.1'}]
    if len(ips) == 0:
        ips = [{'success': True, 'policy_key': '16f9255fe539f8c060b15978916520ae', 'ip': '208.180.254.15'}]
    return ips

def start_scan():
    """Scan services and search for vulnerabiliies.
    """
    ips = find_ips()
    print('IPS: {}'.format(ips))
    responses = []
    services = []
    if len(ips) > 0:
        save_scan_status({'status_list': ips}, 'REQUESTED')
        print('SAVED SCAN STATUS "REQUESTED" FOR EACH IP RETURNED')
        for ip in ips:
            print('STARTING SCAN FOR IP: {0} and policy_key: {1}'.format(ip['ip'], ip['policy_key']))
            update_scan_status(ip['ip'], {'status': 'PENDING', 'date_time_started': current_time()})
            print('UPDATING SCAN STATUS TO PENDING FOR IP: {}'.format(ip['ip']))
            services = scan_services_by_ip(ip)
            print('SERVICES LISTENING: {}'.format(services))
            for service in services['services']:
                if service['cpe'] != '':
                    service['cpe'] = service['cpe'][7:]
                    vulnerabilities = search_vulnerabilities(service)
                    response_to_save_api = {'ip': '', 'policy_key':'', 'vulnerabilities': []}
                    response_to_save_api['ip'] = ip['ip']
                    response_to_save_api['policy_key'] = ip['policy_key']
                    response_to_save_api['vulnerabilities'] = vulnerabilities['vulnerabilities']
                    #Saving scan result to api provided
                    save_scan_result(response_to_save_api)
                    for vulnerability in vulnerabilities['vulnerabilities']:
                        response = {}
                        response['ip'] = ip['ip']
                        response['policy_key'] = ip['policy_key']
                        response['port'] = service['port']
                        response['service'] = service['name']
                        response['version'] = service['version']
                        response['vulnerability'] = vulnerability['vulnerability']
                        response['vulnerability_text'] = vulnerability['vulnerability_text']
                        response['score'] = vulnerability['score']
                        responses.append(response)
            update_scan_status(ip['ip'], {'status': 'COMPLETED', 'date_time_completed': current_time()})
            print('UPDATING SCAN STATUS TO COMPLETED FOR IP: {}'.format(ip['ip']))

        try:
            data = {'history_list': responses}
            history_bulk_insert(data)
        except:
            print('there is an error trying to history bulk insert')
    return "ok"

def history_bulk_insert(params):
    """Bulk insert history of scans on database.
    """
    last_id = history_last_id()
    print('last_id before '+str(last_id))
    last_id = last_id != None and int(last_id) + 1 or 1
    print('last_id after '+str(last_id))
    response = []
    for item in params['history_list']:
        obj = {}
        obj['id'] = last_id
        obj['ip'] = item['ip']
        obj['port'] = item['port']
        obj['score'] = item['score']
        obj['service'] = item['service']
        obj['version'] = item['version']
        obj['vulnerability'] = item['vulnerability']
        obj['vulnerability_text'] = item['vulnerability_text']
        response.append(obj)
    if len(response):
        result = db['history'].insert_many(response)
    return '\nsuccess'

def history_last_id():
    """Retrieve last id of scan results history.
    """
    results = db['history'].find_one(sort=[("id", -1)])
    if results != None:
        results = results["id"]
    return results

def update_collections():
    file_prefix = "nvdcve-2.0-"
    file_suffix = ".xml.gz"
    file_mod = "modified"
    file_rec = "recent"
    getfile = file_prefix + file_mod + file_suffix
    try:
        (f, r) = Configuration.getFile(Configuration.getFeedURL('cve') + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?"%(Configuration.getFeedURL("cve") + getfile))
    i = cve_db.getInfo("cves")
    last_modified = parse_datetime(r.headers['last-modified'], ignoretz=True)
    if i is not None:
        if last_modified == i['last-modified']:
            print("Not modified")
            return "Not modified"
    cve_db.setColUpdate("cves", last_modified)
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in ch.cves:
        # check if the CVE already exists.
        x = cve_db.getCVE(item['id'])
        # if so, update the entry.
        if x:
            if 'cvss' not in item:
                item['cvss'] = None
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            cve_db.updateCVE(item)
        else:
            cve_db.insertCVE(item)
    # get the 'recent' file
    getfile = file_prefix + file_rec + file_suffix
    try:
        (f, r) = Configuration.getFile(Configuration.getFeedURL('cve') + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?"%(Configuration.getFeedURL("cve") + getfile))
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in progressbar(ch.cves):
        # check if the CVE already exists.
        x = cve_db.getCVE(item['id'])
        # if so, update the entry.
        if x:
            if args.v:
                print("item found : " + item['id'])
            if 'cvss' not in item:
                item['cvss'] = None
            else:
                item['cvss'] = float(item['cvss'])
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            cve_db.updateCVE(item)
        # if not, create it.
        else:
            cve_db.insertCVE(item)
    return 'success'

def status_last_id():
    """Retrieve last id of scan status.
    """
    print('inside status_last_id')
    print('check status collection exist')
    print("status" in db.collection_names())
    if("status" in db.collection_names()):
        try:
            results = db['status'].find_one(sort=[("id", -1)])['id']
        except:
            results = None
    else:
        results = None
    return results

def save_scan_status(params, status):
    """Insert status of scans on database. Insert one or many records.
    """
    print('inside save_scan_status ')
    print(params)
    last_id = status_last_id()
    last_id = last_id != None and int(last_id) + 1 or 1
    print('last_id ', last_id)
    response = []
    for item in params['status_list']:
        obj = {}
        obj['id'] = last_id
        obj['ip'] = item['ip']
        obj['policy_key'] = item['policy_key']
        obj['status'] = status
        obj['date_time_requested'] = current_time()
        response.append(obj)
    db['status'].insert_many(response)
    return '\nsuccess'

def update_scan_status(ip, obj):
    """Update status of scan to "Ready".
    """
    #params = request.get_json()
    status = db['status'].find_one({"ip": ip}, sort=[("id", -1)])
    response = None
    if(status):
        print('update _id:',status['_id'], status['id'], status['status'])
        datekeys = [key for key in obj.keys()]
        datekey = datekeys[1]
        print('DATEKEY: {}'.format(datekey))
        print('DATEKEY VALUE: {}'.format(obj[datekey]))
        db['status'].update_one({'_id':status['_id']}, {"$set": {"status":obj['status'],  datekey: obj[datekey]}}, upsert=False)
        response = '\success'
    else:
        response = 'Pending status with ip:'+ip+' no found.'
    return response

def scan_services_by_ip(ip):
    """
    Scan ports and services for a given IP address.
    DATA: results = {'ip': '', 'policy_key': '','results': []}
    POST: Returns an object with ip, policy and a list of results
          containing the services with its versions,
          Returns the CPE name.
    """
    params = ip
    nm.scan(str(params['ip']))
    results = {'ip': '', 'policy_key': '','services': []}
    results['ip'] = params['ip']
    results['policy_key'] = params['policy_key']
    try:
        all_ports_detected = nm[params['ip']]['tcp']
        for port in all_ports_detected:
            port_scan_result = all_ports_detected[port]
            port_scan_result['port'] = port
            if (int(port) == 443):
                try:
                    port_scan_result['tls_versions'] = scan_for_tls_support(params['ip'])
                except:
                    port_scan_result['tls_versions'] = []
            results['services'].append(port_scan_result)
    except:
        results['services'] = []
    return results

def current_time():
    localtime = time.asctime(time.localtime(time.time()))
    return localtime

def scan_for_tls_support(ip):
    ssl_results = nm.scan(ip, arguments="-p 443 --script ssl-enum-ciphers")
    ssl_ciphers_results = ssl_results['scan'][ip]['tcp'][443]['script']['ssl-enum-ciphers']
    ssl_tls_version_matches = re.findall('TLSv\d.\d', ssl_ciphers_results, re.DOTALL)
    return ssl_tls_version_matches
